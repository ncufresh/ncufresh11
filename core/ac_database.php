<?php	
/**
 * Armored Core - Database connection handler
 * Jessee Hsin-Wen Kung @ 2011.05.24
 * Department of Computer Science and Information Engineering, National Central University
 * 
 * Control MySQL database operations such as query, connect or array
 * fetching. All operation record will also be recorded
 */
require_once('ac_common.php');

/**
 * if ac_database_sql_operations_log is true, all querying operations
 * will be recorded. Remove it if current program is not in testdrive
 */
define('ac_database_sql_operations_log', false);

class ac_database
{
	/**
	 * Hostname of MySQL Server current project using, should be IP address or domain name
	 */
	var $host;
	
	/**
	 * Username of MySQL database connection handler
	 */ 
	var $username;
	
	/**
	 * Password corresponed to parameter SQL_CTRL_USERNAME
	 */
	var $password;
	
	/**
	 * The database of current project using
	 */
	var $db_name;
	
	/**
	 * Resource ID of current session
	 */
	var $curr_db_resource_id;
	
	/**
	 * Log of each operation, contains error number and error message
	 */
	var $sql_operations_log = array();
	
	
	/**
	 * Constructor, build a connection with MySQL
	 *
	 * @param input_host Hostname of MySQL Server current project using, should be IP address or domain name
	 * @param input_username Username of MySQL database connection handler 
	 * @param input_password Password corresponed to parameter SQL_CTRL_USERNAME
	 * @param input_db_name The database of current project using
	 */
	public function __construct($input_host, $input_username, $input_password, $input_db_name)
	{
		$this -> host = $input_host;
		$this -> username = $input_username;
		$this -> password = $input_password;
		$this -> db_name = $input_db_name;
		
		$this -> curr_db_resource_id = @mysql_connect(($this -> host), ($this -> username), ($this -> password));
		
		@mysql_select_db(($this -> db_name),($this -> curr_db_resource_id));
		if(mysql_errno($this -> curr_db_resource_id) != 0 && ac_database_sql_operations_log)
		{
			array_push($this -> sql_operations_log, ("<strong>Armored Core</strong>: ac_database:: constructor(): ".mysql_errno($this -> curr_db_resource_id).": ".mysql_error($this -> curr_db_resource_id)."<br /><i><u>Error while selecting the database @ ".__FILE__." LINE ".__LINE__.".</u></i><br /><br />"));
		}
		
		mysql_query("SET NAMES utf8", $this -> curr_db_resource_id);
	}
	
	/**
	 * Desstructor
	 */
	public function __destruct()
	{
		$this -> sql_close($this -> curr_db_resource_id);
	}
	
	/**
	 * Corresponding to mysql_query()
	 *
	 * @param strsql SQL commands, in SQL language
	 * @return Quering result, as a source
	 */
	public function sql_query($strsql)
	{
		$src =  mysql_query($strsql,  $this -> curr_db_resource_id);
		if(ac_database_sql_operations_log)
		{
			$err_num = mysql_errno($this -> curr_db_resource_id);
			array_push($this -> sql_operations_log, ("<code>".mysql_error($this -> curr_db_resource_id)." <u>".$strsql."</u></code>" . ($err_num == 0 ? "" : (",with error number:".$err_num))));
		}
		return $src;
	}
	
	/**
	 * Corresponded to mysql_insert_id(), fetch the last AUTO_INCREMENT id
	 * generated by mysql_query("INSERT ...")
	 *
	 * @return the last AUTO_INCREMENT ID fetched from data table last operated
	 */
	public function sql_insert_id()
	{
		return mysql_insert_id();
	}
	
	/**
	 * Print all querying operations with MySQL. Notice that no log will
	 * be printed if ac_database_sql_operations_log recorded in false
	 */
	public function sql_print_msg()
	{
		if(ac_database_sql_operations_log)
		{
			$counter = 0;
			echo "<strong>Armored Core</strong>:: ac_database:: Logbook of all sql operations:<br />";
			for($i=0; $i<count($this -> sql_operations_log); $i++)
			{
				echo "<strong>[" . $i . "]: </strong>".$this -> sql_operations_log[$i] . "<br />";
				$counter++;
			}
			echo "<br />";
		}
	}
	
	/**
	 * Corresponding to mysql_num_rows()
	 *
	 * @param input_sql_result Resource of quering result after SQL commands executed
	 * @return Count of corresponded data
	 */
	public function sql_num_rows($input_sql_result)
	{
		return mysql_num_rows($input_sql_result);
	}
	
	/**
	 * Corresponding to mysql_fetch_array(), contains field name in both numerical index and string index
	 *
	 * @param input_sql_result Resource of quering result after SQL commands executed
	 * @return Packaged 1D array, with input_sql_result as the source of data
	 */
	public function sql_fetch_array($input_sql_result)
	{
		return mysql_fetch_array($input_sql_result);
	}
	
	/**
	 * Corresponding to mysql_fetch_assoc(), contains field name in string index
	 *
	 * @param input_sql_result Resource of quering result after SQL commands executed
	 * @return Packaged 1D array, with input_sql_result as the source of data
	 */
	public function sql_fetch_assoc($input_sql_result)
	{
		return mysql_fetch_assoc($input_sql_result);
	}
	
	/**
	 * Corresponding to mysql_fetch_assoc(), contains field name in numerical index
	 *
	 * @param input_sql_result Resource of quering result after SQL commands executed
	 * @return Packaged 1D array, with input_sql_result as the source of data
	 */
	public function sql_fetch_row($input_sql_result)
	{
		return mysql_fetch_row($input_sql_result);
	}
	
	/**
	 * Corresponding to mysql_close()
	 *
	 * @return true on success, false on failed
	 */
	public function sql_close()
	{
		if($this ->curr_db_resource_id)
		{
			return mysql_close($this -> curr_db_resource_id);
		}
	}
	
	/**
	 * Return the version of MySQL
	 *
	 * @return Version of MySQL
	 */
	public function sql_version()
	{
		return "MySQL ".mysql_get_server_info();
	}
}
?>
